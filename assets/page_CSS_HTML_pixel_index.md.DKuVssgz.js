import{at as a,m as l,l as i,aS as e}from"./chunks/framework.DrfD3omv.js";const m=JSON.parse('{"title":"CSS 单位","description":"","frontmatter":{},"headers":[],"relativePath":"page/CSS_HTML/pixel/index.md","filePath":"page/CSS_HTML/pixel/index.md","lastUpdated":1724122316000}'),t={name:"page/CSS_HTML/pixel/index.md"},r=e('<h1 id="css-单位" tabindex="-1">CSS 单位 <a class="header-anchor" href="#css-单位" aria-label="Permalink to &quot;CSS 单位&quot;">​</a></h1><h2 id="设备物理像素" tabindex="-1">设备物理像素 <a class="header-anchor" href="#设备物理像素" aria-label="Permalink to &quot;设备物理像素&quot;">​</a></h2><h3 id="pt" tabindex="-1">pt： <a class="header-anchor" href="#pt" aria-label="Permalink to &quot;pt：&quot;">​</a></h3><ul><li>屏幕宽、分辨率，其中每一小份就是 1pt。</li><li>word 文档里的字号 与 html 的字号对应关系： <ul><li>初号：42pt； 小初：36pt； 一号：26pt； 小一：24pt； 二号：22pt</li><li>小二：18pt； 三号：16pt； 小三：15pt； 四号：14pt； 小四：12pt</li><li>五号：10.5pt 小五：9pt</li></ul></li></ul><h2 id="css-像素" tabindex="-1">CSS 像素 <a class="header-anchor" href="#css-像素" aria-label="Permalink to &quot;CSS 像素&quot;">​</a></h2><h3 id="px" tabindex="-1">px： <a class="header-anchor" href="#px" aria-label="Permalink to &quot;px：&quot;">​</a></h3><ul><li>pc 机大屏幕显示器，1px 约等于 0.76 个物理像素</li><li>手机小屏幕：以 IPhone6 为标准，物理像素 750，分辨率 375 1px = 2pt。</li><li>px 也是一个相对单位</li><li>px 是为了平衡一个元素在 PC 上显示的大小与在手机上显示的大小尽量一致而制定的。</li><li>手机屏幕大小不一，差异较大，所以反而不希望一个元素在所有手机上显示一样大。而是希望能够自动等比缩放。所以移动端不用 px。</li><li>通常 PC 端大屏浏览器的网页，使用 px 单位比较多。</li><li>移动端少用，因为 px 的长度相对固定，无法根据大小不一的移动端设备自适应改变大小。</li></ul><h3 id="rem" tabindex="-1">rem: <a class="header-anchor" href="#rem" aria-label="Permalink to &quot;rem:&quot;">​</a></h3><ul><li>以网页根元素<code>&lt;html&gt;</code>元素上的默认字体大小为 16px，那么 1rem = 16px</li><li>可以实现响应式布局。</li><li>响应式布局指的是元素大小能根据屏幕大小随时变化。</li><li>所有以 rem 为单位的位置、大小都跟着根元素字体大小而变化。</li><li>所以只要在屏幕大小变化的时候改变根元素的 font-size 就可以了。</li></ul><h3 id="em" tabindex="-1">em: <a class="header-anchor" href="#em" aria-label="Permalink to &quot;em:&quot;">​</a></h3><ul><li>若父元素的字体大小为 16px, 则 1em = 16px， em 用的不多。</li><li>相对于父元素字体大小的单位，多层嵌套可能导致累积计算。</li></ul><h3 id="rpx" tabindex="-1">rpx: <a class="header-anchor" href="#rpx" aria-label="Permalink to &quot;rpx:&quot;">​</a></h3><ul><li>小程序专用。</li><li>以 iPhone 为标准，物理像素 750，分辨率 375。无论屏幕大小，都将屏幕分成 750 份，每份就是 1rpx, 1rpx=0.5px=1pt</li><li>优点：通过 rpx 设置元素和字体的大小，小程序在不同尺寸的屏幕下，可以实现自动适配。</li></ul><h3 id="vw-vh-css3-新特性" tabindex="-1">vw/vh:（CSS3 新特性） <a class="header-anchor" href="#vw-vh-css3-新特性" aria-label="Permalink to &quot;vw/vh:（CSS3 新特性）&quot;">​</a></h3><ul><li>vh: 无论视口高度多少，都将视口高均分为 100 份，每一小份就是 1vh，所以，也是相对单位可随视口大小变化而自动变化。</li><li>vw：无论视口宽度多少，都将视口宽均分 100 份，每一小份就是 1vw，所以也是相对单位，可随视口大小变化而自动变化。</li><li>vw 和 vh 本质就是%百分比</li><li>这里视口指的是浏览器内部的可视区域大小。</li></ul><h3 id="百分比" tabindex="-1">%百分比: <a class="header-anchor" href="#百分比" aria-label="Permalink to &quot;%百分比:&quot;">​</a></h3><ul><li>通常认为子元素的百分比完全相对于直接父元素，但是，不总是相对于父元素的对应属性值。</li><li>子元素的 top 和 bottom 如果设置百分比，则相对于直接非 static 定位（默认定位）的父元素高度。</li><li>子元素的 left 和 right 如果设置百分比，则相对于直接非 static 定位父元素的宽度。</li><li>子元素的 padding/margin 如果设置百分比，不论是垂直方向或者水平方向，都相对于直接父亲元素的 padding/margin,与父元素的 height 有关。</li><li>因为 % 不总是相对于父元素的宽高或者屏幕大小，所以开发少用。</li></ul>',17),h=[r];function o(p,n,s,d,c,x){return i(),l("div",null,h)}const _=a(t,[["render",o]]);export{m as __pageData,_ as default};
